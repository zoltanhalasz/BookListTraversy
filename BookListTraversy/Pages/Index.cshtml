@page
@model IndexModel
@{
    ViewData["Title"] = "Book List";
}
<div class="container mt-4">
    <h1 class="display-4 text-center">
        <i class="fas fa-book-open text-primary"></i> My<span class="text-primary">Book</span>List
    </h1>
    <form id="book-form">
        <div class="form-group">
            <label for="title">Title</label>
            <input type="text" id="title" class="form-control">
        </div>
        <div class="form-group">
            <label for="author">Author</label>
            <input type="text" id="author" class="form-control">
        </div>
        <div class="form-group">
            <label for="isbn">ISBN#</label>
            <input type="text" id="isbn" class="form-control">
        </div>
        <input type="submit" value="Add Book" class="btn btn-primary btn-block">
    </form>
    <table class="table table-striped mt-5">
        <thead>
            <tr>
                <th>Title</th>
                <th>Author</th>
                <th>ISBN#</th>
                <th></th>
            </tr>
        </thead>
        <tbody id="book-list"></tbody>
    </table>
</div>
<script>
    // Book Class: Represents a Book
    class Book {
      constructor(id, title, author, isbn) {
        this.id = id;
        this.title = title;
        this.author = author;
        this.isbn = isbn;
      }
    }

// UI Class: Handle UI Tasks
    class UI {
      static displayBooks() {
          //const books = Store.getBooks();
          Store.getBooks();
      }

      static addBookToList(book) {
        const list = document.querySelector('#book-list');
          if (!book.id) book.id = 0;
          const row = document.createElement('tr');
          row.setAttribute("id", book.id);
            row.innerHTML = `
              <td>${book.title}</td>
              <td>${book.author}</td>
              <td>${book.isbn}</td>
              <td><a href="#" class="btn btn-danger btn-sm delete" data-id="${book.id}">X</a></td>
            `;

        list.appendChild(row);
      }

      static deleteBook(el) {
          if (el.classList.contains('delete')) {
              el.parentElement.parentElement.remove();                 
          }      
      }

      static showAlert(message, className) {
        const div = document.createElement('div');
        div.className = `alert alert-${className}`;
          div.appendChild(document.createTextNode(message));
          const container = document.getElementsByClassName('container')[0];
          const form = document.getElementById('book-form');
          container.insertBefore(div, form);

        // Vanish in 3 seconds
        setTimeout(() => document.querySelector('.alert').remove(), 3000);
      }

      static clearFields() {
        document.querySelector('#title').value = '';
        document.querySelector('#author').value = '';
        document.querySelector('#isbn').value = '';
      }
    }

// Store Class: Handles Storage
    class Store {
      static getBooks() {
          const url = '/api/BookModels';      
                fetch(url)
                    .then((resp) => resp.json())
                    .then(function (data) {
                        books = [...data];
                        console.log('Getting books from backend: ', books);
                        books.forEach((book) => UI.addBookToList(book));
                    });      
      }

      static addBook(book) {
          //const books = Store.getBooks();
      
        //localStorage.setItem('books', JSON.stringify(books));
          const url = '/api/BookModels/'
                console.log('postTransaction', url, book);
                fetch(url, {
                    method: 'POST',
                    headers: {
                        'Content-type': 'application/json',
                    },
                    body: JSON.stringify(book),
                }
                ).then((res) => res.json())
                    .then(function (response) {
                        book.id = response.id;
                        books.push(book);
                        UI.addBookToList(book);                    
                        console.log('after posting the book, the response from server ', response);                   
                    }).catch(() => console.error("error when posting"));
      }

      static removeBook(target) {      
          console.log(target);
          const myID = target.getAttribute('data-id');
          if (!myID) return;

        books.forEach((book, index) => {
          if(book.id === myID) {
            books.splice(index, 1);
          }
        });  
    
              const myUrl = `/api/BookModels/${myID}`
              console.log('deleteBook', myID, myUrl);
              fetch(myUrl, {
                    method: 'DELETE',
                    headers: {
                        'Content-type': 'application/json',
                    },                
              }
              ).then(function (response) {              
                  console.log('deleted from backend');             
              }).catch(() => console.error("error when deleting " + myID));   
      }
    }

    let books = [];
    // Event: Display Books
    document.addEventListener('DOMContentLoaded', UI.displayBooks);

    // Event: Add a Book
    document.querySelector('#book-form').addEventListener('submit', (e) => {
      // Prevent actual submit
      e.preventDefault();

      // Get form values
      const title = document.querySelector('#title').value;
      const author = document.querySelector('#author').value;
      const isbn = document.querySelector('#isbn').value;

      // Validate
      if(title === '' || author === '' || isbn === '') {
        UI.showAlert('Please fill in all fields', 'danger');
      }
      else  {
        // Instatiate book
        const book = new Book(0, title, author, isbn);

        // Add Book to UI
 

        // Add book to store
        Store.addBook(book);

        // Show success message
        UI.showAlert('Book Added', 'success');

        // Clear fields
        UI.clearFields();
      }
    });

    // Event: Remove a Book
      document.querySelector('#book-list').addEventListener('click', (e) => {
      // Remove book from UI
      UI.deleteBook(e.target);
      // Remove book from store
      Store.removeBook(e.target);
      // Show success message
      UI.showAlert('Book Removed', 'success');
    });
</script>
